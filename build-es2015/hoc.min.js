const tslib_1=require("tslib");const lGet=require("lodash.get");const React=require("react");const constants_1=require("./constants");const themeable_1=require("./themeable");const memoize=require("memoizee");const getThemeableFn=(theme)=>themeable_1.themeable(theme);const getThemeableFnDefaultMemoizeeOpts={length:1,max:10};const hocDefaults={themeKey:"theme",themeProp:"t"};
function themeDecorator({themeKey,themeProp,memoizeeOpts,contextPath}={}){const getThemeableFnMemoized=memoize(getThemeableFn,memoizeeOpts||getThemeableFnDefaultMemoizeeOpts);const passedThemePropToChild=themeProp||hocDefaults.themeProp;return(WrappedComponent)=>{const HOCThemeable=(props,contextArg)=>{const passedThemeableFn=getThemeableFnMemoized(contextPath?lGet(contextArg,contextPath):props[themeKey||hocDefaults.themeKey]);const passedHOCProps={[passedThemePropToChild]:passedThemeableFn};return React.createElement(WrappedComponent,
tslib_1.__assign({},passedHOCProps,props))};HOCThemeable.contextTypes={[constants_1.THEME_PROVIDER_CONTEXT_KEY]:React.PropTypes.object};return HOCThemeable}}exports.themeDecorator=themeDecorator;