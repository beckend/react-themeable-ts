{"version":3,"sources":["../src/hoc.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,mCAAmC;AACnC;;GAEG;AACH,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,4BAGO,aAAa,CAAC,CAAA;AACrB,4BAA2C,aAAa,CAAC,CAAA;AACzD,8BAA6B,aAAa,CAAC,CAAA;AAE3C;;GAEG;AACH,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACpC,iCAAiC;AACjC,MAAM,cAAc,GAAG,CAAC,KAAU,KAAK,qBAAS,CAAC,KAAK,CAAC,CAAC;AACxD,MAAM,iCAAiC,GAAG;IACxC,MAAM,EAAE,CAAC;IACT,GAAG,EAAE,EAAE;CACR,CAAC;AAeF;;GAEG;AACH,MAAM,WAAW,GAAG;IAClB,QAAQ,EAAE,OAAO;IACjB,SAAS,EAAE,GAAG;IACd,UAAU,EAAE,sCAA0B;CACvC,CAAC;AAQF;;GAEG;AACH,wBAA8D,EAC5D,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,OAAO,EACP,WAAW,GACZ,GAAwB;QACvB,OAAO,EAAE,KAAK;KACf;IACC,MAAM,sBAAsB,GAAG,OAAO,CAAC,cAAc,EAAE,YAAY,IAAI,iCAAiC,CAAC,CAAC;IAE1G,MAAM,sBAAsB,GAAG,SAAS,IAAI,WAAW,CAAC,SAAS,CAAC;IAElE,2BAA2B;IAC3B,MAAM,CAAC,CAAC,gBAAkC;QACxC,2BAA2B;QAC3B,MAAM,YAAY,GAAmB,CAAC,CAAC,KAAK,EAAE,UAAe;YAC3D,MAAM,iBAAiB,GAAG,sBAAsB,CAC9C,OAAO;;oBAEH,iBAAK,CAAC,UAAU,EAAE,WAAW,IAAI,WAAW,CAAC,UAAU,CAAC;;oBAExD,KAAK,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,CAAC,CAC5C,CAAC;YACF,MAAM,cAAc,GAAG;gBACrB,CAAC,sBAAsB,CAAC,EAAE,iBAAiB;aAC5C,CAAC;YAEF,MAAM,CAAC,CACL,oBAAC,gBAAgB,eAAK,cAAc,EAAM,KAAK,EAAI,CACpD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,YAAY,CAAC,YAAY,GAAG;YAC1B,CAAC,sCAA0B,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;SACrD,CAAC;QAEF,sDAAsD;QACtD,4CAA4C;QAC5C,MAAM,CAAC,YAAkC,CAAC;IAC5C,CAAC,CAAC;AACJ,CAAC;AAzCe,sBAAc,iBAyC7B,CAAA","file":"hoc.js","sourcesContent":["/* tslint:disable: variable-name */\n/**\n * HOC react component\n */\nimport * as React from 'react';\nimport {\n  themeable,\n  IStaticFnReturn,\n} from './themeable';\nimport { THEME_PROVIDER_CONTEXT_KEY } from './constants';\nimport { get as opGet } from 'object-path';\n\n/**\n * Memoizee\n */\nconst memoize = require('memoizee');\n// Memoizeable themeable function\nconst getThemeableFn = (theme: any) => themeable(theme);\nconst getThemeableFnDefaultMemoizeeOpts = {\n  length: 1,\n  max: 10,\n};\n\nexport type TDecComponent<P> = React.SFC<P> | React.ComponentClass<P>;\nexport interface IThemeDecoratorArgs {\n  // The prop the HOC will use as argument for themeable\n  themeKey?: string;\n  // The prop name passed prop to DecoratedComponent as the returned themeable function\n  themeProp?: string;\n  // options passed to https://github.com/medikoo/memoizee\n  memoizeeOpts?: any;\n  // context if true will be used to navigate with \"object-path\" in context to find the theme object\n  context?: boolean;\n  // If not using default context path\n  contextPath?: string | string[];\n}\n/**\n * Defaults for the HOC\n */\nconst hocDefaults = {\n  themeKey: 'theme',\n  themeProp: 't',\n  contextKey: THEME_PROVIDER_CONTEXT_KEY,\n};\nexport interface IHOCDefaultNoThemeProps {\n  t: IStaticFnReturn;\n}\nexport interface IHOCDefaultProps extends IHOCDefaultNoThemeProps {\n  theme?: any;\n}\n\n/**\n * Main decorator\n */\nexport function themeDecorator<P extends IThemeDecoratorArgs>({\n  themeKey,\n  themeProp,\n  memoizeeOpts,\n  context,\n  contextPath,\n}: IThemeDecoratorArgs = {\n  context: false,\n}) {\n  const getThemeableFnMemoized = memoize(getThemeableFn, memoizeeOpts || getThemeableFnDefaultMemoizeeOpts);\n\n  const passedThemePropToChild = themeProp || hocDefaults.themeProp;\n\n  // tslint:disable-next-line\n  return (WrappedComponent: TDecComponent<P>) => {\n    // tslint:disable-next-line\n    const HOCThemeable: React.SFC<any> = ((props, contextArg: any) => {\n      const passedThemeableFn = getThemeableFnMemoized(\n        context\n          ?\n            opGet(contextArg, contextPath || hocDefaults.contextKey)\n          :\n            props[themeKey || hocDefaults.themeKey]\n      );\n      const passedHOCProps = {\n        [passedThemePropToChild]: passedThemeableFn,\n      };\n\n      return (\n        <WrappedComponent {...passedHOCProps} {...props} />\n      );\n    });\n\n    HOCThemeable.contextTypes = {\n      [THEME_PROVIDER_CONTEXT_KEY]: React.PropTypes.object,\n    };\n\n    // Seems like it's no possible to return this as a SFC\n    // without complaint when decorating a class\n    return HOCThemeable as React.SFC<P> | any;\n  };\n}\n"],"sourceRoot":"/source/"}